//Calculator code by me

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Calculator</title>
    <style>
        body {
            margin: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background-color: beige;
        }

        #Calculator {
            background-repeat: no-repeat;
            /* background-image: url(Photos/sakin.jpg); */
            background-position-x: center;
            background-position-y: calc(50% + .8in);
            background-size: cover;
            font-family: Arial, sans-serif;
            background-color: rgb(160, 158, 158);
            border-radius: 15px;
            max-width: 500px;
            overflow: hidden;
        }

        #display {
            width: 100%;
            padding: 5vw;
            font-size: 2rem;
            text-align: right;
            border: none;
            background-color: rgb(180, 180, 250);
            color: wheat;
            font-weight: bold;
            box-sizing: border-box;
        }

        #keys {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 10px;
            padding: 25px;
        }


        button {
            width: 80px;
            height: 10vh;
            border-radius: 30px;
            border: 2px solid black;
            background-color: rgb(180, 180, 250);
            color: whitesmoke;
            font-size: 2.5rem;
            font-weight: bold;
            cursor: pointer;
        }

        .operator {
            background-color: rgb(230, 200, 200);
            color: black;
        }

        .operator:hover {
            background-color: rgb(250, 220, 220);
        }

        .operator:active {
            background-color: rgb(260, 230, 220) !important;
        }

        .special {
            background-color: blue;
        }


        button:hover {
            background-color: rgb(190, 190, 300);
        }

        button:active {
            background-color: rgb(200, 200, 300);
        }
    </style>
</head>

<body>

    <div id="Calculator">

        <input id="display" readonly>
        <div id="keys">
            <button onclick="clearDisplay('C')" class="operator">C</button>
            <button onclick="appendToDisplay('M+')" class="operator">M+</button>
            <button onclick="appendToDisplay('%')" class="operator">%</button>
            <button onclick="appendToDisplay('/')" class="operator">/</button>
            <button onclick="appendToDisplay('7')">7</button>
            <button onclick="appendToDisplay('8')">8</button>
            <button onclick="appendToDisplay('9')">9</button>
            <button onclick="appendToDisplay('*')" class="operator">*</button>
            <button onclick="appendToDisplay('4')">4</button>
            <button onclick="appendToDisplay('5')">5</button>
            <button onclick="appendToDisplay('6')">6</button>
            <button onclick="appendToDisplay('-')" class="operator">-</button>
            <button onclick="appendToDisplay('1')">1</button>
            <button onclick="appendToDisplay('2')">2</button>
            <button onclick="appendToDisplay('3')">3</button>
            <button onclick="appendToDisplay('+')" class="operator">+</button>
            <button onclick="appendToDisplay('0')">0</button>
            <button onclick="appendToDisplay('.')">.</button>

            <button onclick="memoryRecall()" class="operator">MR</button>
            <button onclick="calculate()" class="operator">=</button>
        </div>
    </div>

    <script>
        const display = document.getElementById("display");

        let memoryValue = 0;

        function appendToDisplay(input) {
            if (input === 'M+') {
                memoryPlus();
            } else {
                display.value += input;
            }
        }

        function memoryPlus() {
            const current = parseFloat(display.value);
            if (!isNaN(current)) {
                memoryValue += current;
                display.value = '';
            } else {
                display.value = "ERROR";
            }
        }

        function memoryRecall() {
            display.value += memoryValue.toString();
        }

        function clearDisplay() {
            display.value = "";

        }

        function calculate() {
            try {
                display.value = eval(display.value);
            }
            catch (error) {
                display.value = "ERROR"
            }

        }
    </script>
</body>

</html>






















// snake code by me
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="viewport"
        content="width=device-width, initial-scale=1, maximum-scale=3, minimum-scale=1, user-scalable=yes">
    <title>Snake Game</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=New+Tegomin&display=swap');

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            background: url(Photos/snakeLogo.png);
            background-repeat: no-repeat;
            background-position: bottom right;
            background-color: rgb(130, 130, 100);
            display: flex;
            flex-direction: column;
            align-items: center;
            height: 100vh;
            font-family: 'New Tegomin', serif;
            justify-content: center;
        }

        .header {
            text-align: center;
            width: 100%;
            margin-bottom: 20px;
        }

        .gameContainer {
            display: flex;
            flex-direction: row;
            align-items: center;
        }

        .scoreContainer {
            display: flex;
            flex-direction: column;
            align-items: flex-start;
            margin-left: 20px;
            font-size: 20px;
            margin-top: -480px;
        }

        #scoreBox,
        #hiscoreBox {
            font-size: 24px;
            font-weight: bold;
            margin: 10px;
        }

        #resetHighScore {
            font-family: 'New Tegomin', serif;
            background: none;
            border: 3px solid;
            border-radius: 10px;
            font-size: 24px;
            font-weight: bold;
            margin: 10px;
            padding: 10px 20px;
            text-align: center;
            white-space: nowrap;
            width: auto;
            display: inline-block;
        }

        #board {
            background: linear-gradient(rgb(170, 236, 170), rgb(236, 236, 167));
            width: 80vw;
            height: 80vh;
            max-width: 700px;
            max-height: 700px;
            margin: 0 auto;
            border: 2px solid black;
            display: grid;
            grid-template-rows: repeat(48, 1fr);
            grid-template-columns: repeat(48, 1fr);
            padding: 10px;
        }

        .head {
            background: linear-gradient(rgb(240, 124, 124), rgb(228, 228, 129));
            border: 2px solid black;
            width: 100%;
            height: 100%;
        }

        .snake {
            background-color: purple;
            border: 1px solid white;
            width: 100%;
            height: 100%;
        }

        .food {
            background: linear-gradient(red, purple);
            border: 1px solid black;
            border-radius: 50%;
            width: 100%;
            height: 100%;
        }

        .mobile-controls {
            position: fixed;
            bottom: 50px;
            left: 50%;
            transform: translateX(-50%);
            display: none;
            flex-direction: column;
            align-items: center;
            gap: 10px;
        }

        .mobile-controls div {
            display: flex;
            justify-content: center;
            gap: 50px;
            width: 100%;
        }

        button {
            font-size: 28px;
            padding: 18px;
            width: 70px;
            height: 70px;
            margin: 5px;
            background-color: #4CAF50;
            border: none;
            border-radius: 50%;
            cursor: pointer;
        }

        button:hover {
            background-color: #45a049;
        }

        .mobile-message {
            display: none;
            font-size: 15px;
            color: white;
            font-weight: bold;
            text-align: center;
            position: absolute;
            top: 10px;
            right: 10px;
            padding: 5px 15px;
            background-color: rgba(0, 0, 0, 0.5);
            border-radius: 5px;
            word-wrap: break-word;
            max-width: 90vw;
        }

        @media (max-width: 768px) {
            body {
                background: rgb(130, 130, 100);
            }

            .header {
                display: none;
            }

            #board {
                width: 90vw;
                height: 90vw;
                max-width: 400px;
                max-height: 400px;
            }

            .scoreContainer {
                font-size: 16px;
                margin-left: 10px;
                margin-top: -20px;
                position: absolute;
                top: 10px;
                left: 10px;
            }

            button:hover {
                background-color: none;
                background: none;
            }

            .mobile-controls {
                display: flex;
                bottom: 20px;
            }

            button {
                background: none;
                border: 2px solid;
                font-size: 24px;
                padding: 15px;
                width: 60px;
                height: 60px;
            }
        }

        @media (max-width: 480px) {
            .scoreContainer {
                width: 50vw;
                height: 1vh;
                font-size: 20px;
                margin-left: 3vw;
                margin-top: -5vw;
                position: absolute;
                top: 10px;
                left: 10px;
            }

            .mobile-message {
                display: block;
            }

            #board {
                margin-bottom: 30vw;
                width: 90vw;
                height: 90vw;
                max-width: 300px;
                max-height: 300px;
            }

            button:hover {
                background-color: none;
                background: none;
            }

            button {
                background: none;
                border: 2px solid;
                /* font-size: 40px; */
                /* padding: 15px; */
                /* width: 70px; */
                /* height: 70px; */
                font-size: 10vw;
                /* padding: 1vw; */
                width: 20vw;
                height: 20vw;
            }

            .mobile-controls div {
                gap: 80px;
            }
        }
    </style>
</head>

<body>
    <div class="header">
        <h1>Snake Game</h1>
    </div>
    <div class="gameContainer">
        <div id="board"></div>
        <div class="scoreContainer">
            <div id="scoreBox">Score: 0</div>
            <div id="hiscoreBox">HiScore: 0</div>
            <button id="resetHighScore">Reset High Score</button>
        </div>

        <div class="mobile-controls">
            <button id="upBtn">↑</button>
            <div>
                <button id="leftBtn">←</button>
                <button id="rightBtn">→</button>
            </div>
            <button id="downBtn">↓</button>
        </div>
        <div class="mobile-message">
            Use PC or laptop <br> for better experience
        </div>
    </div>

    <script>
        let inputDir = { x: 0, y: 0 };
        let speed = 10;
        let score = 0;
        let lastPaintTime = 0;
        let snakeArr = [{ x: 13, y: 15 }];
        let food = { x: 6, y: 7 };
        let board = document.getElementById("board");

        let foodSound = new Audio("music/food.mp3");
        let gameOverSound = new Audio("music/gameover.mp3");
        let moveSound = new Audio("music/move.mp3");
        let musicSound = new Audio("music/background.mp3");
        musicSound.loop = true;

        let hiscore = localStorage.getItem("hiscore");
        let hiscoreval = hiscore ? JSON.parse(hiscore) : 0;
        document.getElementById("hiscoreBox").innerHTML = "HiScore: " + hiscoreval;

        board.style.gridTemplateRows = "repeat(28, 1fr)";
        board.style.gridTemplateColumns = "repeat(28, 1fr)";

        function main(ctime) {
            window.requestAnimationFrame(main);
            if ((ctime - lastPaintTime) / 1000 < 1 / speed) return;
            lastPaintTime = ctime;
            gameEngine();
        }

        function isCollide(snake) {
            for (let i = 1; i < snake.length; i++) {
                if (snake[i].x === snake[0].x && snake[i].y === snake[0].y) return true;
            }
            return snake[0].x >= 28 || snake[0].x < 0 || snake[0].y >= 28 || snake[0].y < 0;
        }

        function gameEngine() {
            if (isCollide(snakeArr)) {
                gameOverSound.play();
                musicSound.pause();
                alert("Game Over! Press any key to restart.");
                snakeArr = [{ x: 13, y: 15 }];
                inputDir = { x: 0, y: 0 };
                score = 0;
                document.getElementById("scoreBox").innerHTML = "Score: " + score;
                musicSound.play();
            }

            if (snakeArr[0].x === food.x && snakeArr[0].y === food.y) {
                foodSound.play();
                score += 1;
                if (score > hiscoreval) {
                    hiscoreval = score;
                    localStorage.setItem("hiscore", JSON.stringify(hiscoreval));
                    document.getElementById("hiscoreBox").innerHTML = "HiScore: " + hiscoreval;
                }
                document.getElementById("scoreBox").innerHTML = "Score: " + score;
                snakeArr.unshift({ x: snakeArr[0].x + inputDir.x, y: snakeArr[0].y + inputDir.y });

                let a = 2, b = 25;
                food = { x: Math.floor(a + (b - a) * Math.random()), y: Math.floor(a + (b - a) * Math.random()) };
            }

            for (let i = snakeArr.length - 2; i >= 0; i--) {
                snakeArr[i + 1] = { ...snakeArr[i] };
            }
            snakeArr[0].x += inputDir.x;
            snakeArr[0].y += inputDir.y;

            board.innerHTML = "";

            snakeArr.forEach((e, index) => {
                let snakeElement = document.createElement('div');
                snakeElement.style.gridRowStart = e.y + 1;
                snakeElement.style.gridColumnStart = e.x + 1;
                snakeElement.classList.add(index === 0 ? 'head' : 'snake');
                board.appendChild(snakeElement);
            });

            let foodElement = document.createElement('div');
            foodElement.style.gridRowStart = food.y + 1;
            foodElement.style.gridColumnStart = food.x + 1;
            foodElement.classList.add('food');
            board.appendChild(foodElement);
        }

        window.requestAnimationFrame(main);

        window.addEventListener("keydown", (e) => {
            inputDir = { x: 0, y: 1 };
            moveSound.play();
            musicSound.play();

            switch (e.key) {
                case "ArrowUp": inputDir = { x: 0, y: -1 }; break;
                case "ArrowDown": inputDir = { x: 0, y: 1 }; break;
                case "ArrowLeft": inputDir = { x: -1, y: 0 }; break;
                case "ArrowRight": inputDir = { x: 1, y: 0 }; break;
            }
        });

        document.getElementById("resetHighScore").addEventListener("click", () => {
            localStorage.removeItem("hiscore");
            hiscoreval = 0;
            localStorage.setItem("hiscore", hiscoreval);
            document.getElementById("hiscoreBox").innerHTML = "HiScore: " + hiscoreval;
            alert("🔥 High Score Reset! 🔥");
        });

        document.getElementById('upBtn').addEventListener('click', () => {
            inputDir = { x: 0, y: -1 };
            moveSound.play();
        });

        document.getElementById('downBtn').addEventListener('click', () => {
            inputDir = { x: 0, y: 1 };
            moveSound.play();
        });

        document.getElementById('leftBtn').addEventListener('click', () => {
            inputDir = { x: -1, y: 0 };
            moveSound.play();
        });

        document.getElementById('rightBtn').addEventListener('click', () => {
            inputDir = { x: 1, y: 0 };
            moveSound.play();
        });

    </script>
</body>

</html>






















//mine game code by me

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Minesweeper</title>
    <link href="https://fonts.googleapis.com/css2?family=New+Tegomin&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            background-color: rgb(130, 130, 100);
            display: flex;
            flex-direction: column;
            align-items: center;
            height: 100vh;
            font-family: 'New Tegomin', serif;
            justify-content: center;
            gap: 20px;
        }

        h1 {
            text-align: center;
        }

        .game-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            gap: 20px;
        }

        .board {
            display: grid;
            grid-template-columns: repeat(15, 35px);
            grid-template-rows: repeat(15, 35px);
            gap: 1px;
            width: 525px;
            height: 525px;
        }

        .cell {
            width: 35px;
            height: 35px;
            background: #a8a88c;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 18px;
            font-weight: bold;
            cursor: pointer;
            border: 1px solid #666;
            text-align: center;
            line-height: 1;
            overflow: hidden;
        }

        .cell.revealed {
            background: #d6d6bc;
            cursor: default;
        }

        .cell.mine {
            background: red;
            color: white;
            animation: explode 0.5s ease-out;
        }

        @keyframes explode {
            0% {
                transform: scale(1);
                opacity: 1;
            }

            50% {
                transform: scale(1.5);
                opacity: 0.5;
            }

            100% {
                transform: scale(1);
                opacity: 0;
            }
        }

        button {
            padding: 10px;
            font-size: 16px;
            cursor: pointer;
            width: 200px;
            max-width: 100%;
            margin-top: 20px;
        }

        .mobile-message {
            display: none;
            font-size: 15px;
            color: white;
            font-weight: bold;
            text-align: center;
            position: absolute;
            top: 10px;
            right: -100px;
            padding: 5px 15px;
            background-color: rgba(0, 0, 0, 0.5);
            border-radius: 5px;
            word-wrap: break-word;
            max-width: 90vw;
        }

        @media (max-width: 600px) {
            .board {
                width: 375px;
                height: 375px;
            }

            .cell {
                font-size: 14px;
            }

            button {
                width: 150px;
            }

            .mobile-message {
                display: block;
            }
        }
    </style>
</head>

<body>
    <h1>Minesweeper</h1>
    <div class="game-container">
        <div class="board" id="board"></div>
        <button onclick="startGame()">Restart</button>
    </div>
    <div class="mobile-message">
        Use desktop mode <br> for better experience
    </div>

    <script>
        const rows = 15, cols = 15, mines = 30;
        let board = [];

        function startGame() {
            const boardElement = document.getElementById('board');
            boardElement.innerHTML = '';
            board = Array.from({ length: rows }, () => Array(cols).fill(0));
            placeMines();

            for (let r = 0; r < rows; r++) {
                for (let c = 0; c < cols; c++) {
                    const cell = document.createElement('button');
                    cell.classList.add('cell');
                    cell.dataset.row = r;
                    cell.dataset.col = c;
                    cell.addEventListener('click', () => revealCell(r, c, cell));
                    boardElement.appendChild(cell);
                }
            }
        }

        function placeMines() {
            let mineCount = 0;
            while (mineCount < mines) {
                let r = Math.floor(Math.random() * rows);
                let c = Math.floor(Math.random() * cols);
                if (board[r][c] !== 'M') {
                    board[r][c] = 'M';
                    mineCount++;
                    updateNumbers(r, c);
                }
            }
        }

        function updateNumbers(r, c) {
            for (let dr = -1; dr <= 1; dr++) {
                for (let dc = -1; dc <= 1; dc++) {
                    let nr = r + dr, nc = c + dc;
                    if (nr >= 0 && nr < rows && nc >= 0 && nc < cols && board[nr][nc] !== 'M') {
                        board[nr][nc]++;
                    }
                }
            }
        }

        function revealCell(r, c, cell) {
            if (cell.classList.contains('revealed')) return;
            cell.classList.add('revealed');
            if (board[r][c] === 'M') {
                cell.classList.add('mine');
                revealMines();
                setTimeout(() => alert('Game Over!'), 500);
                setTimeout(startGame, 1000);
                return;
            }
            cell.innerText = board[r][c] === 0 ? '' : board[r][c];
            if (board[r][c] === 0) {
                revealAdjacentCells(r, c);
            }
        }

        function revealAdjacentCells(r, c) {
            let toReveal = [[r, c]];
            while (toReveal.length) {
                let [cr, cc] = toReveal.pop();
                for (let dr = -1; dr <= 1; dr++) {
                    for (let dc = -1; dc <= 1; dc++) {
                        let nr = cr + dr, nc = cc + dc;
                        if (nr >= 0 && nr < rows && nc >= 0 && nc < cols) {
                            let neighbor = document.querySelector(`[data-row='${nr}'][data-col='${nc}']`);
                            if (neighbor && !neighbor.classList.contains('revealed')) {
                                neighbor.classList.add('revealed');
                                neighbor.innerText = board[nr][nc] === 0 ? '' : board[nr][nc];
                                if (board[nr][nc] === 0) toReveal.push([nr, nc]);
                            }
                        }
                    }
                }
            }
        }

        function revealMines() {
            for (let r = 0; r < rows; r++) {
                for (let c = 0; c < cols; c++) {
                    if (board[r][c] === 'M') {
                        const mineCell = document.querySelector(`[data-row='${r}'][data-col='${c}']`);
                        mineCell.classList.add('mine');
                    }
                }
            }
        }

        startGame();
    </script>
</body>

</html>


















// tic tac toe by me

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tic Tac Toe</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100..900;1,100..900&display=swap');

        * {
            margin: 0;
            padding: 0;
        }

        body {
            background-color: #FFF9F2;
            margin: 0px;
        }

        nav {
            background-color: rgb(50, 50, 50);
            color: white;
            height: 50px;
            font-size: 25px;
            display: flex;
            padding: 0 10px;
            align-items: center;
            font-weight: bold;
            font-family: 'Roboto', sans-serif;
        }

        nav ul {
            list-style-type: none;
        }

        .gameContainer {
            display: flex;
            justify-content: center;
            margin-top: 50px;
        }

        .container {
            display: grid;
            grid-template-rows: repeat(3, 15vw);
            grid-template-columns: repeat(3, 15vw);
            font-family: 'Roboto', sans-serif;
            position: relative;
        }

        .box {
            font-size: min(15vw, 80px);
            border: 2px solid black;
            font-size: 10vw;
            cursor: pointer;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .box:hover {
            background-color: blanchedalmond;
        }

        .info {
            font-size: 20px;
        }

        .gameInfo {
            padding: 35px;
            font-size: 'Baloo Bhaina 2', cursive;
        }

        .imgbox img {
            width: 0;
            transition: width 1s ease-in-out;
        }

        .br-0 {
            border-right: 0;
        }

        .bl-0 {
            border-left: 0;
        }

        .bt-0 {
            border-top: 0;
        }

        .bb-0 {
            border-bottom: 0;
        }

        #reset {
            margin: 15px 25px;
            padding: 1px 15px;
            background-color: rgb(230, 245, 245);
            border-radius: 6px;
            cursor: pointer;
            font-family: 'Baloo Bhaina 2';
            font-size: 25px;
            font-weight: bold;
        }

        @media screen and (max-width: 800px) {
            .gameContainer {
                flex-direction: column;
                align-items: center;
            }

            .container {
                grid-template-rows: repeat(3, minmax(60px, 25vw));
                grid-template-columns: repeat(3, minmax(60px, 25vw));
            }

            .gameInfo {
                text-align: center;
                padding: 20px;
            }

            .info {
                font-size: 16px;
            }

            #reset {
                font-size: 20px;
                padding: 5px 10px;
            }

            .gameInfo h1 {
                font-size: 2.5rem;
            }
        }
    </style>
</head>

<body>
    <nav>
        <ul>
            <li>TIC TAC TOE</li>
        </ul>
    </nav>

    <div class="gameContainer">
        <div class="container">
            <div class="box bl-0 bt-0"><span class="boxtext"></span></div>
            <div class="box bt-0"><span class="boxtext"></span></div>
            <div class="box bt-0 br-0"><span class="boxtext"></span></div>
            <div class="box bl-0"><span class="boxtext"></span></div>
            <div class="box"><span class="boxtext"></span></div>
            <div class="box br-0"><span class="boxtext"></span></div>
            <div class="box bl-0 bb-0"><span class="boxtext"></span></div>
            <div class="box bb-0"><span class="boxtext"></span></div>
            <div class="box bb-0 br-0"><span class="boxtext"></span></div>
        </div>
        <div class="gameInfo">
            <h1>Welcome to TIC TAC TOE</h1>
            <div>
                <span class="info">Turn for X</span>
                <button id="reset">reset</button>
            </div>
            <div class="imgbox">
                <img src="Photos/cartoon-unscreen.gif" alt="">
            </div>
        </div>
    </div>

    <script>
        console.log("Welcome to Tic Tac Toe")
        let turn = "X"
        let gameover = false;

        const changeTurn = () => {
            return turn === "X" ? "0" : "X"
        }

        const checkWin = () => {
            let boxtext = document.getElementsByClassName('boxtext');
            let wins = [
                [0, 1, 2],
                [3, 4, 5],
                [6, 7, 8],
                [0, 3, 6],
                [1, 4, 7],
                [2, 5, 8],
                [0, 4, 8],
                [6, 4, 2],
            ]
            wins.forEach(e => {
                if ((boxtext[e[0]].innerText === boxtext[e[1]].innerText) && (boxtext[e[2]].innerText === boxtext[e[1]].innerText) && boxtext[e[0]].innerText !== "") {
                    document.querySelector('.info').innerText = boxtext[e[0]].innerText + " won"
                    gameover = true
                    document.querySelector('.imgbox').getElementsByTagName('img')[0].style.width = "200px";
                }
            })
        }

        //Game logic
        let boxes = document.getElementsByClassName("box");
        Array.from(boxes).forEach(element => {
            let boxtext = element.querySelector('.boxtext');
            element.addEventListener('click', () => {
                if (boxtext.innerText === '') {
                    boxtext.innerText = turn;
                    turn = changeTurn();
                    checkWin();
                    if (!gameover) {
                        document.getElementsByClassName("info")[0].innerText = "Turn for " + turn;
                    }
                }
            })
        })


        reset.addEventListener('click', (e) => {
            let boxtexts = document.querySelectorAll('.boxtext');
            Array.from(boxtexts).forEach(element => {
                element.innerText = ""
            });
            turn = "X"
            gameover = false
            document.getElementsByClassName("info")[0].innerText = "Turn for " + turn;
            document.querySelector('.imgbox').getElementsByTagName('img')[0].style.width = "0px"

        })
    </script>

</body>

</html>

















//mine game previous
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mine Game | atsuchak</title>
    <style>
        * {
            box-sizing: border-box;
        }

        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            margin: 0;
            padding: 20px;
        }

        .container {
            max-width: 600px;
            margin: auto;
            text-align: center;
        }

        h1 {
            color: #333;
        }

        .game-board {
            display: grid;
            grid-template-columns: repeat(12, 1fr);
            gap: 5px;
            margin: 20px 0;
        }

        .cell {
            width: 100%;
            padding: 0;
            /* Remove padding to make it square */
            aspect-ratio: 1;
            /* Ensures the cell is square */
            background-color: #fff;
            border: 1px solid #ccc;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        .cell:hover {
            background-color: #e0e0e0;
        }

        .cell.revealed {
            background-color: #d1ffd1;
        }

        .cell.mine {
            background-color: #ffcccc;
        }

        button {
            padding: 10px 20px;
            font-size: 16px;
            cursor: pointer;
        }

        .message {
            margin-top: 20px;
            font-size: 18px;
            color: #d9534f;
        }
    </style>
</head>

<body>
    <div class="container">
        <h1>Mine Game</h1>
        <div id="gameBoard" class="game-board"></div>
        <button id="resetButton">Reset Game</button>
        <div id="message" class="message"></div>
    </div>
    <script>const boardSize = 12; // 12x12 grid
        const mineCount = 20; // Adjusted mine count for larger board
        let board = [];
        let gameOver = false;
        
        function createBoard() {
            board = Array.from({ length: boardSize }, () => Array(boardSize).fill(0));
            placeMines();
            renderBoard();
        }
        
        function placeMines() {
            let minesPlaced = 0;
            while (minesPlaced < mineCount) {
                const x = Math.floor(Math.random() * boardSize);
                const y = Math.floor(Math.random() * boardSize);
                if (board[x][y] !== 'M') {
                    board[x][y] = 'M';
                    minesPlaced++;
                }
            }
        }
        
        function renderBoard() {
            const gameBoard = document.getElementById('gameBoard');
            gameBoard.innerHTML = '';
            board.forEach((row, x) => {
                row.forEach((cell, y) => {
                    const cellDiv = document.createElement('div');
                    cellDiv.classList.add('cell');
                    cellDiv.addEventListener('click', () => handleCellClick(x, y));
                    gameBoard.appendChild(cellDiv);
                });
            });
        }
        
        function handleCellClick(x, y) {
            if (gameOver) return;
            const cell = board[x][y];
            if (cell === 'M') {
                revealMines();
                document.getElementById('message').innerText = 'Game Over! You hit a mine!';
                gameOver = true;
            } else {
                revealRandomConnectedCells(x, y);
            }
        }
        
        function revealRandomConnectedCells(x, y) {
            const maxCellsToReveal = Math.floor(Math.random() * 7) + 1; // Random number of cells to reveal (1 to 7)
            const revealedCells = new Set(); // To keep track of already revealed cells
            const cellsToReveal = [];
        
            // Get all adjacent cells
            const directions = [
                [-1, -1], [-1, 0], [-1, 1],
                [0, -1],          [0, 1],
                [1, -1], [1, 0], [1, 1]
            ];
        
            // Collect all adjacent cells
            for (const [dx, dy] of directions) {
                const newX = x + dx;
                const newY = y + dy;
                if (newX >= 0 && newX < boardSize && newY >= 0 && newY < boardSize) {
                    cellsToReveal.push([newX, newY]);
                }
            }
        
            // Shuffle the adjacent cells and select a random number to reveal
            for (let i = 0; i < cellsToReveal.length; i++) {
                const randomIndex = Math.floor(Math.random() * cellsToReveal.length);
                [cellsToReveal[i], cellsToReveal[randomIndex]] = [cellsToReveal[randomIndex], cellsToReveal[i]];
            }
        
            // Reveal the selected number of cells
            for (let i = 0; i < Math.min(maxCellsToReveal, cellsToReveal.length); i++) {
                const [cellX, cellY] = cellsToReveal[i];
                if (board[cellX][cellY] !== 'M' && !revealedCells.has(`${cellX},${cellY}`)) {
                    revealedCells.add(`${cellX},${cellY}`);
                    const cellDiv = document.querySelectorAll('.cell')[cellX * boardSize + cellY];
                    cellDiv.classList.add('revealed');
                }
            }
        }
        
        function revealMines() {
            board.forEach((row, x) => {
                row.forEach((cell, y) => {
                    if (cell === 'M') {
                        const cellDiv = document.querySelectorAll('.cell')[x * boardSize + y];
                        cellDiv.classList.add('mine');
                    }
                });
            });
        }
        
        document.getElementById('resetButton').addEventListener('click', () => {
            gameOver = false;
            document.getElementById('message').innerText = '';
            createBoard();
        });
        
        createBoard();
    </script>
</body>

</html>



































//index file


<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description"
        content="Ahnaf Tajwar Suchak is a Computer Science student at United International University. Passionate about software development, machine learning, and robotics. Explore his portfolio, projects, resume, and contact details.">
    <meta name="keywords"
        content="Ahnaf Tajwar Suchak, atsuchak, CSE, UIU, machine learning, software developer, portfolio, student portfolio, ahnaf portfolio, robotics, programming">
    <meta name="author" content="Ahnaf Tajwar Suchak">
    <meta name="robots" content="index, follow">

    <meta name="google-site-verification" content="zwjdEiJwszMmT55Mu6acBytEkdbiRacshKRwZxAaB8I" />
    <link rel="icon" type="image/png" href="Photos/image.ico" />
    
    <title>Ahnaf Tajwar Suchak | Portfolio</title>
    <link rel="stylesheet" href="CSS/index.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <link
        href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;500;600;700&family=Poppins:wght@500;600;700;800&display=swap"
        rel="stylesheet">
</head>

<body>
    <!-- Header -->
    <header id="header" class="header">
        <div class="container">
            <nav class="nav">
                <!-- Logo -->
                <a href="#hero" class="logo">Suchak<span>.</span></a>

                <!-- Desktop Navigation -->
                <div class="nav-links">
                    <a href="#about" class="nav-link">About</a>
                    <a href="#skills" class="nav-link">Skills</a>
                    <a href="#projects" class="nav-link">Projects</a>
                    <a href="#contact" class="nav-link">Contact</a>
                    <a href="https://github.com/atsuchak" target="_blank" rel="noopener noreferrer" class="nav-link">
                        <i class="fab fa-github"></i>
                    </a>
                    <a href="https://linkedin.com/in/atsuchak" target="_blank" rel="noopener noreferrer" class="nav-link">
                        <i class="fab fa-linkedin"></i>
                    </a>
                </div>

                <!-- Resume Button -->
                <a href="https://drive.google.com/file/d/1memmnMUhBdIv33HbwQvdMQTvAB8KrU-J/view?usp=sharing"
                    class="resume-btn">Resume</a>

                <!-- Mobile menu button -->
                <div class="hamburger">
                    <div class="bar"></div>
                    <div class="bar"></div>
                    <div class="bar"></div>
                </div>
            </nav>
        </div>

        <!-- Mobile Navigation -->
        <div class="mobile-nav">
            <div class="mobile-nav-links">
                <a href="#about" class="mobile-nav-link">About</a>
                <a href="#skills" class="mobile-nav-link">Skills</a>
                <a href="#projects" class="mobile-nav-link">Projects</a>
                <a href="#contact" class="mobile-nav-link">Contact</a>
                <div class="mobile-social-links">
                    <a href="https://github.com/atsuchak" target="_blank" rel="noopener noreferrer">
                        <i class="fab fa-github"></i>
                    </a>
                    <a href="https://linkedin.com/in/" target="_blank" rel="noopener noreferrer">
                        <i class="fab fa-linkedin"></i>
                    </a>
                </div>
                <a href="https://drive.google.com/uc?export=view&id=1hVFpEtWldRS7z6uAFUNOGgY3eXQdf8UB"
                    class="mobile-resume-btn">Resume</a>
            </div>
        </div>
    </header>

    <main>
        <!-- Hero Section -->
        <section id="hero" class="hero-section">
            <div class="container">
                <div class="hero-content">
                    <p class="intro-text">Hi, my name is </p>
                    <h1 class="name">Suchak.</h1>
                    <h2 class="headline">CSE student passionate about software development</h2>
                    <p class="description">
                        I'm a Computer Science student at United International University, passionate about software
                        development and problem-solving.
                    </p>
                    <a href="#projects" class="cta-button">Check out my work!</a>
                </div>
            </div>
        </section>

        <!-- About Section -->
        <section id="about" class="about-section">
            <div class="container">
                <div class="about-grid">
                    <div class="about-content">
                        <h2 class="section-heading">About Me</h2>
                        <div class="about-text">
                            <p>
                                Hi! I’m Ahnaf Tajwar Suchak, a CSE student passionate about software development. I
                                started exploring web development by playing around with HTML and CSS, and quickly grew
                                to love building clean, responsive, and user-friendly websites.
                            </p>
                            <p>
                                These days, I’m focused on building accessible and inclusive web projects while
                                continuously learning and growing as a developer.
                            </p>
                            <p>
                                Here are a few technologies I've been working with recently:
                            </p>
                            <ul class="skills-list">
                                <li>JavaScript (ES6+)</li>
                                <li>HTML</li>
                                <li>Python</li>
                                <li>CSS</li>
                                <li>JAVA</li>
                                <li>C</li>
                            </ul>
                        </div>
                    </div>
                    <div class="about-image-container">
                        <div class="image-frame">
                            <img src="Photos/suchak.jpg" alt="Alex Tsuchak" class="about-image">
                        </div>
                    </div>
                </div>
            </div>
        </section>

        <!-- Skills Section -->
        <section id="skills" class="skills-section">
            <div class="container">
                <h2 class="section-heading">Skills & Expertise</h2>
                (Just for fullfill the section)
                <div class="skills-grid">
                    <!-- Skill Card 1 -->
                    <div class="skill-card">
                        <div class="skill-icon">
                            <i class="fas fa-code"></i>
                        </div>
                        <h3 class="skill-title">Frontend Development</h3>
                        <div class="skill-tags">
                            <span class="skill-tag">HTML5</span>
                            <span class="skill-tag">CSS3</span>
                            <span class="skill-tag">JavaScript</span>
                            <span class="skill-tag">React</span>
                            <span class="skill-tag">Next.js</span>
                        </div>
                        <p class="skill-description">Building responsive and accessible user interfaces with modern
                            frameworks and best practices.</p>
                    </div>

                    <!-- Skill Card 2 -->
                    <div class="skill-card">
                        <div class="skill-icon">
                            <i class="fas fa-server"></i>
                        </div>
                        <h3 class="skill-title">Backend Development</h3>
                        <div class="skill-tags">
                            <span class="skill-tag">Node.js</span>
                            <span class="skill-tag">Express</span>
                            <span class="skill-tag">Python</span>
                            <span class="skill-tag">MongoDB</span>
                            <span class="skill-tag">SQL</span>
                        </div>
                        <p class="skill-description">Developing robust server-side applications and APIs with scalable
                            architecture.</p>
                    </div>

                    <!-- Skill Card 3 -->
                    <div class="skill-card">
                        <div class="skill-icon">
                            <i class="fas fa-tools"></i>
                        </div>
                        <h3 class="skill-title">DevOps & Tools</h3>
                        <div class="skill-tags">
                            <span class="skill-tag">Git</span>
                            <span class="skill-tag">Docker</span>
                            <span class="skill-tag">AWS</span>
                            <span class="skill-tag">CI/CD</span>
                            <span class="skill-tag">Testing</span>
                        </div>
                        <p class="skill-description">Implementing deployment pipelines, containerization, and
                            maintaining development workflows.</p>
                    </div>

                    <!-- Skill Card 4 -->
                    <div class="skill-card">
                        <div class="skill-icon">
                            <i class="fas fa-paint-brush"></i>
                        </div>
                        <h3 class="skill-title">UI/UX Design</h3>
                        <div class="skill-tags">
                            <span class="skill-tag">Figma</span>
                            <span class="skill-tag">Adobe XD</span>
                            <span class="skill-tag">Sketch</span>
                            <span class="skill-tag">Wireframing</span>
                            <span class="skill-tag">Prototyping</span>
                        </div>
                        <p class="skill-description">Creating intuitive and visually appealing user experiences with a
                            focus on usability.</p>
                    </div>

                    <!-- Skill Card 5 -->
                    <div class="skill-card">
                        <div class="skill-icon">
                            <i class="fas fa-mobile-alt"></i>
                        </div>
                        <h3 class="skill-title">Mobile Development</h3>
                        <div class="skill-tags">
                            <span class="skill-tag">React Native</span>
                            <span class="skill-tag">Flutter</span>
                            <span class="skill-tag">Swift</span>
                            <span class="skill-tag">Kotlin</span>
                        </div>
                        <p class="skill-description">Building cross-platform mobile applications with native-like
                            performance and experience.</p>
                    </div>

                    <!-- Skill Card 6 -->
                    <div class="skill-card">
                        <div class="skill-icon">
                            <i class="fas fa-tasks"></i>
                        </div>
                        <h3 class="skill-title">Project Management</h3>
                        <div class="skill-tags">
                            <span class="skill-tag">Agile</span>
                            <span class="skill-tag">Scrum</span>
                            <span class="skill-tag">Jira</span>
                            <span class="skill-tag">Trello</span>
                        </div>
                        <p class="skill-description">Leading teams with agile methodologies, user stories, and sprint
                            planning.</p>
                    </div>
                </div>
            </div>
        </section>

        <!-- Projects Section -->
        <section id="projects" class="projects-section">
            <div class="container">
                <h2 class="section-heading">Some Things I've Built</h2>
                <div class="projects-grid">
                    <!-- Project Card 1 -->
                    <div class="project-card">
                        <div class="project-image-container">
                            <img src="Photos/calculator.png" alt="Calculator" class="project-image">
                        </div>
                        <div class="project-content">
                            <h3 class="project-title">Calculator</h3>
                            <p class="project-description">A basic tool for quick and easy arithmetic calculations,
                                designed for simplicity and efficiency.</p>
                            <div class="project-tech">
                                <span class="tech-tag">HTML</span>
                                <span class="tech-tag">CSS</span>
                                <span class="tech-tag">JavaScript</span>
                            </div>
                            <div class="project-links">
                                <a href="calculator.html" class="project-link" target="_blank"
                                    rel="noopener noreferrer">
                                    <i class="fas fa-external-link-alt"></i> Live
                                </a>
                                <a href="https://github.com/atsuchak/atsuchak.github.io/blob/main/calculator.html"
                                    class="project-link" target="_blank" rel="noopener noreferrer">
                                    <i class="fab fa-github"></i> Source
                                </a>
                            </div>
                        </div>
                    </div>

                    <!-- Project Card 2 -->
                    <div class="project-card">
                        <div class="project-image-container">
                            <img src="Photos/tictactoe.png" alt="Tic Tac Toe" class="project-image">
                        </div>
                        <div class="project-content">
                            <h3 class="project-title">Tic-Tac-Toe</h3>
                            <p class="project-description">A simple yet engaging strategy game where two players take
                                turns marking spaces to form a winning line.</p>
                            <div class="project-tech">
                                <span class="tech-tag">HTML</span>
                                <span class="tech-tag">CSS</span>
                                <span class="tech-tag">JavaScript</span>
                            </div>
                            <div class="project-links">
                                <a href="tictactoe.html" class="project-link" target="_blank" rel="noopener noreferrer">
                                    <i class="fas fa-external-link-alt"></i> Live
                                </a>
                                <a href="https://github.com/atsuchak/atsuchak.github.io/blob/main/tictactoe.html"
                                    class="project-link" target="_blank" rel="noopener noreferrer">
                                    <i class="fab fa-github"></i> Source
                                </a>
                            </div>
                        </div>
                    </div>

                    <!-- Project Card 3 -->
                    <div class="project-card">
                        <div class="project-image-container">
                            <img src="Photos/snake.png" alt="Snake image" class="project-image">
                        </div>
                        <div class="project-content">
                            <h3 class="project-title">Snake Game</h3>
                            <p class="project-description">a classic arcade game where you guide a growing snake to eat
                                food while avoiding walls and itself.</p>
                            <div class="project-tech">
                                <span class="tech-tag">HTML</span>
                                <span class="tech-tag">CSS</span>
                                <span class="tech-tag">JavaScript</span>
                            </div>
                            <div class="project-links">
                                <a href="snake.html" class="project-link" target="_blank" rel="noopener noreferrer">
                                    <i class="fas fa-external-link-alt"></i> Live
                                </a>
                                <a href="https://github.com/atsuchak/atsuchak.github.io/blob/main/snake.html"
                                    class="project-link" target="_blank" rel="noopener noreferrer">
                                    <i class="fab fa-github"></i> Source
                                </a>
                            </div>
                        </div>
                    </div>

                    <!-- Project Card 4 -->
                    <div class="project-card">
                        <div class="project-image-container">
                            <img src="Photos/mineweeper.png" alt="Minesweeper" class="project-image">
                        </div>
                        <div class="project-content">
                            <h3 class="project-title">Minesweeper</h3>
                            <p class="project-description">Minesweeper is a logic-based puzzle game where you uncover
                                tiles and avoid hidden mines to clear the board.</p>
                            <div class="project-tech">
                                <span class="tech-tag">HTML</span>
                                <span class="tech-tag">CSS</span>
                                <span class="tech-tag">JavaScript</span>
                            </div>
                            <div class="project-links">
                                <a href="mineGame.html" class="project-link" target="_blank" rel="noopener noreferrer">
                                    <i class="fas fa-external-link-alt"></i> Live
                                </a>
                                <a href="https://github.com/atsuchak/atsuchak.github.io/blob/main/mineGame.html"
                                    class="project-link" target="_blank" rel="noopener noreferrer">
                                    <i class="fab fa-github"></i> Source
                                </a>
                            </div>
                        </div>
                    </div>

                    <!-- Project Card 5 -->
                    <div class="project-card">
                        <div class="project-image-container">
                            <img src="Photos/facebook.png" alt="Facebook image" class="project-image">
                        </div>
                        <div class="project-content">
                            <h3 class="project-title">Facebook Login: Clone</h3>
                            <p class="project-description">Facebook Login Clone is a replica interface mimicking the
                                Facebook login page for practice or UI demo.</p>
                            <div class="project-tech">
                                <span class="tech-tag">HTML</span>
                                <span class="tech-tag">CSS</span>
                                <span class="tech-tag">JavaScript</span>
                            </div>
                            <div class="project-links">
                                <a href="facebook.html" class="project-link" target="_blank" rel="noopener noreferrer">
                                    <i class="fas fa-external-link-alt"></i> Live
                                </a>
                                <a href="https://github.com/atsuchak/atsuchak.github.io/blob/main/facebook.html"
                                    class="project-link" target="_blank" rel="noopener noreferrer">
                                    <i class="fab fa-github"></i> Source
                                </a>
                            </div>
                        </div>
                    </div>

                    <!-- Project Card 6 -->
                    <div class="project-card">
                        <div class="project-image-container">
                            <img src="Photos/gridRunner.png"
                                alt="Line Flux" class="project-image">
                        </div>
                        <div class="project-content">
                            <h3 class="project-title">Grid Runner </h3>
                            <p class="project-description">Grid runner is a fast‑paced lane‑shifting arcade challenge where your glowing block dodges relentless obstacles in a stylish cyber grid.</p>
                            <div class="project-tech">
                                <span class="tech-tag">HTML</span>
                                <span class="tech-tag">CSS</span>
                                <span class="tech-tag">JavaScript</span>
                            </div>
                            <div class="project-links">
                                <a href="gridRunner.html" class="project-link" target="_blank" rel="noopener noreferrer">
                                    <i class="fas fa-external-link-alt"></i> Live
                                </a>
                                <a href="https://github.com/atsuchak/atsuchak.github.io/blob/main/gridRunner.html" class="project-link" target="_blank" rel="noopener noreferrer">
                                    <i class="fab fa-github"></i> Source
                                </a>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="more-projects">
                    <a href="https://github.com/atsuchak" target="_blank" rel="noopener noreferrer"
                        class="more-projects-btn">
                        View More on GitHub <i class="fas fa-arrow-right"></i>
                    </a>
                </div>
            </div>
        </section>

        <!-- Contact Section -->
        <section id="contact" class="contact-section">
            <div class="container">
                <p class="contact-pre-heading">What's Next?</p>
                <h2 class="contact-heading">Get In Touch</h2>
                <p class="contact-description">
                    I'm always learning—feel free to share your feedback or ideas!
                </p>

                <form id="contact-form" class="contact-form">
                    <div class="form-row">
                        <div class="form-group">
                            <input type="text" id="name" name="entry.1222639255" placeholder="Name" required
                                class="form-input">
                            <span class="error-message" id="name-error"></span>
                        </div>
                        <div class="form-group">
                            <input type="email" id="email" name="entry.2087220391" placeholder="Email" required
                                class="form-input">
                            <span class="error-message" id="email-error"></span>
                        </div>
                    </div>
                    <div class="form-group">
                        <input type="text" id="subject" name="subject" placeholder="Subject" required
                            class="form-input">
                        <span class="error-message" id="subject-error"></span>
                    </div>
                    <div class="form-group">
                        <textarea id="message" name="entry.88160229" placeholder="Message" rows="5" required
                            class="form-textarea"></textarea>
                        <span class="error-message" id="message-error"></span>
                    </div>
                    <button type="submit" id="submit-btn" class="submit-btn">Send Message</button>
                </form>

                <div class="social-links">
                    <a href="mailto:ahnaftajwarsuchak.com" class="social-link">
                        <i class="fas fa-envelope"></i>
                    </a>
                    <a href="https://github.com/atsuchak" target="_blank" rel="noopener noreferrer" class="social-link">
                        <i class="fab fa-github"></i>
                    </a>
                    <a href="https://linkedin.com/in/atsuchak" target="_blank" rel="noopener noreferrer"
                        class="social-link">
                        <i class="fab fa-linkedin"></i>
                    </a>
                    <a href="https://twitter.com/atsuchak" target="_blank" rel="noopener noreferrer"
                        class="social-link">
                        <i class="fab fa-twitter"></i>
                    </a>
                </div>
            </div>
        </section>
    </main>

    <!-- Footer -->
    <footer class="footer">
        <div class="container">
            <p class="copyright">
                Designed & Built by atsuchak &copy; <span id="current-year"></span>
            </p>
        </div>
    </footer>

    <!-- Scroll to top button -->
    <button id="scroll-top-btn" class="scroll-top-btn" aria-label="Scroll to top">
        <i class="fas fa-arrow-up"></i>
    </button>

    <!-- Success modal -->
    <div id="success-modal" class="modal">
        <div class="modal-content">
            <span class="close-modal">&times;</span>
            <div class="modal-icon">
                <i class="fas fa-check-circle"></i>
            </div>
            <h3>Message Sent!</h3>
            <p>Thank you for your message. I'll get back to you soon.</p>
        </div>
    </div>

    <script src="script.js"></script>

    <script type="text/javascript" src="https://replit.com/public/js/replit-dev-banner.js"></script>
</body>

</html>
















Achievement section
#HTML
<!-- Achievements & Certificates Section -->
<section id="achievements" class="achievements-section">
    <div class="container">
        <h2 class="section-heading">Achievements & Certificates</h2>
        <div class="achievements-grid">
            <!-- Achievement Card 1 -->
            <div class="achievement-card">
                <div class="achievement-icon">
                    <i class="fas fa-trophy"></i>
                </div>
                <div class="achievement-content">
                    <h3 class="achievement-title">Dean's List Award</h3>
                    <p class="achievement-date">2023</p>
                    <p class="achievement-description">Recognized for outstanding academic performance with a GPA of 3.9/4.0 for the Spring semester.</p>
                    <div class="achievement-issuer">United International University</div>
                </div>
            </div>

            <!-- Achievement Card 2 -->
            <div class="achievement-card">
                <div class="achievement-icon">
                    <i class="fas fa-certificate"></i>
                </div>
                <div class="achievement-content">
                    <h3 class="achievement-title">Full Stack Web Development</h3>
                    <p class="achievement-date">July 2024</p>
                    <p class="achievement-description">Completed 80+ hours of coursework covering HTML, CSS, JavaScript, and responsive design principles.</p>
                    <div class="achievement-issuer">Coursera</div>
                </div>
            </div>

            <!-- Achievement Card 3 -->
            <div class="achievement-card">
                <div class="achievement-icon">
                    <i class="fas fa-medal"></i>
                </div>
                <div class="achievement-content">
                    <h3 class="achievement-title">Hackathon Finalist</h3>
                    <p class="achievement-date">October 2023</p>
                    <p class="achievement-description">Placed in the top 5 teams at UIU's annual hackathon with an innovative solution for campus navigation.</p>
                    <div class="achievement-issuer">UIU Tech Club</div>
                </div>
            </div>

            <!-- Achievement Card 4 -->
            <div class="achievement-card">
                <div class="achievement-icon">
                    <i class="fas fa-laptop-code"></i>
                </div>
                <div class="achievement-content">
                    <h3 class="achievement-title">Python for Data Science</h3>
                    <p class="achievement-date">March 2024</p>
                    <p class="achievement-description">Mastered Python libraries for data analysis including NumPy, Pandas, and Matplotlib.</p>
                    <div class="achievement-issuer">DataCamp</div>
                </div>
            </div>

            <!-- Achievement Card 5 -->
            <div class="achievement-card">
                <div class="achievement-icon">
                    <i class="fas fa-code"></i>
                </div>
                <div class="achievement-content">
                    <h3 class="achievement-title">JavaScript Algorithms and Data Structures</h3>
                    <p class="achievement-date">January 2024</p>
                    <p class="achievement-description">Completed certification covering fundamental programming concepts and algorithms implementation.</p>
                    <div class="achievement-issuer">freeCodeCamp</div>
                </div>
            </div>

            <!-- Achievement Card 6 -->
            <div class="achievement-card">
                <div class="achievement-icon">
                    <i class="fas fa-award"></i>
                </div>
                <div class="achievement-content">
                    <h3 class="achievement-title">Programming Contest Finalist</h3>
                    <p class="achievement-date">November 2023</p>
                    <p class="achievement-description">Ranked among top 10 contestants in the UIU inter-department programming competition.</p>
                    <div class="achievement-issuer">UIU CSE Department</div>
                </div>
            </div>
        </div>
    </div>
</section>




#CSS
/* ===== Achievements & Certificates Section ===== */
.achievements-section {
  padding: 6rem 0;
  background-color: var(--bg-primary);
}

.achievements-grid {
  display: grid;
  gap: 1.5rem;
}

.achievement-card {
  display: flex;
  background-color: var(--bg-secondary);
  padding: 1.5rem;
  border-radius: 0.5rem;
  box-shadow: var(--shadow);
  transition: var(--transition);
  border: 1px solid var(--bg-secondary);
}

.achievement-card:hover {
  transform: translateY(-10px);
  border-color: rgba(100, 255, 218, 0.3);
}

.achievement-icon {
  font-size: 2rem;
  color: var(--accent);
  margin-right: 1.5rem;
  display: flex;
  align-items: center;
  justify-content: center;
  min-width: 3rem;
}

.achievement-content {
  flex: 1;
}

.achievement-title {
  font-size: 1.25rem;
  font-weight: 600;
  color: var(--text-white);
  margin-bottom: 0.5rem;
  font-family: 'Poppins', sans-serif;
}

.achievement-date {
  color: var(--accent);
  font-size: 0.9rem;
  margin-bottom: 0.75rem;
}

.achievement-description {
  color: var(--text-secondary);
  margin-bottom: 0.75rem;
}

.achievement-issuer {
  color: var(--text-primary);
  font-size: 0.9rem;
  font-style: italic;
}

/* Media queries for responsive layout */
@media (min-width: 768px) {
  .achievements-grid {
    grid-template-columns: repeat(2, 1fr);
  }
}

@media (min-width: 1024px) {
  .achievements-grid {
    grid-template-columns: repeat(3, 1fr);
  }
}


#js
// Add animations to elements when they enter the viewport
const animateOnScroll = () => {
  const elements = document.querySelectorAll('.skill-card, .project-card, .achievement-card, .section-heading, .about-image-container');

  elements.forEach(element => {
    const elementPosition = element.getBoundingClientRect().top;
    const windowHeight = window.innerHeight;

    if (elementPosition < windowHeight - 100) {
      element.classList.add('fadeIn');
    }
  });
};




##nav
<!-- Desktop Navigation -->
<div class="nav-links">
    <a href="#about" class="nav-link">About</a>
    <a href="#skills" class="nav-link">Skills</a>
    <a href="#projects" class="nav-link">Projects</a>
    <a href="#achievements" class="nav-link">Achievements</a>
    <a href="#contact" class="nav-link">Contact</a>
    <a href="https://github.com/atsuchak" target="_blank" rel="noopener noreferrer" class="nav-link">
        <i class="fab fa-github"></i>
    </a>
    <a href="https://linkedin.com/in/atsuchak" target="_blank" rel="noopener noreferrer" class="nav-link">
        <i class="fab fa-linkedin"></i>
    </a>
</div>

<!-- Mobile Navigation -->
<div class="mobile-nav-links">
    <a href="#about" class="mobile-nav-link">About</a>
    <a href="#skills" class="mobile-nav-link">Skills</a>
    <a href="#projects" class="mobile-nav-link">Projects</a>
    <a href="#achievements" class="mobile-nav-link">Achievements</a>
    <a href="#contact" class="mobile-nav-link">Contact</a>
    <div class="mobile-social-links">
        <a href="https://github.com/atsuchak" target="_blank" rel="noopener noreferrer">
            <i class="fab fa-github"></i>
        </a>
        <a href="https://linkedin.com/in/" target="_blank" rel="noopener noreferrer">
            <i class="fab fa-linkedin"></i>
        </a>
    </div>
    <a href="https://drive.google.com/uc?export=view&id=1hVFpEtWldRS7z6uAFUNOGgY3eXQdf8UB"
        class="mobile-resume-btn">Resume</a>
</div>









































<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bank Management System</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background-color: #f0f2f5;
            color: #333;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        header {
            background-color: #0066b3;
            color: white;
            padding: 20px 0;
            text-align: center;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
        }

        .card {
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            padding: 20px;
            margin: 20px 0;
        }

        .form-group {
            margin-bottom: 15px;
        }

        label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
        }

        input {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 16px;
        }

        button {
            background-color: #0066b3;
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s;
        }

        button:hover {
            background-color: #004e8c;
        }

        button.secondary {
            background-color: #6c757d;
        }

        button.secondary:hover {
            background-color: #5a6268;
        }

        button.danger {
            background-color: #dc3545;
        }

        button.danger:hover {
            background-color: #c82333;
        }

        .buttons {
            display: flex;
            gap: 10px;
            margin-top: 20px;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }

        table,
        th,
        td {
            border: 1px solid #ddd;
        }

        th,
        td {
            padding: 12px;
            text-align: left;
        }

        th {
            background-color: #f4f4f4;
        }

        tr:nth-child(even) {
            background-color: #f9f9f9;
        }

        .screens>div {
            display: none;
        }

        .screens>div.active {
            display: block;
        }

        .success-message,
        .error-message {
            padding: 10px;
            margin: 10px 0;
            border-radius: 4px;
        }

        .success-message {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .error-message {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .popup-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .popup-content {
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            max-width: 500px;
            width: 90%;
            text-align: center;
        }

        .popup-content h3 {
            margin-top: 0;
            color: #0066b3;
        }

        .popup-content .account-number {
            font-size: 24px;
            font-weight: bold;
            margin: 20px 0;
            padding: 10px;
            background-color: #f0f2f5;
            border-radius: 4px;
        }

        .close-popup {
            display: block;
            margin: 20px auto 0;
            padding: 10px 20px;
        }

        .profile-info {
            display: grid;
            grid-template-columns: 150px 1fr;
            gap: 10px;
        }

        .profile-info div {
            padding: 10px;
        }

        .profile-info div:nth-child(odd) {
            font-weight: bold;
        }

        .nav-tabs {
            display: flex;
            border-bottom: 1px solid #ddd;
            margin-bottom: 20px;
        }

        .nav-tab {
            padding: 10px 15px;
            cursor: pointer;
            border: 1px solid transparent;
            border-bottom: none;
            margin-right: 5px;
            border-radius: 5px 5px 0 0;
        }

        .nav-tab.active {
            background-color: white;
            border-color: #ddd;
            color: #0066b3;
            font-weight: bold;
        }

        .nav-tab:hover:not(.active) {
            background-color: #f0f2f5;
        }

        .logout-btn {
            margin-left: auto;
        }

        /* Responsive CSS for Bank Management System */

        /* Base Styling Improvements */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background-color: #f0f2f5;
            color: #333;
            line-height: 1.6;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            width: 100%;
        }

        header {
            background-color: #0066b3;
            color: white;
            padding: 20px 0;
            text-align: center;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
        }

        /* Responsive Typography */
        @media (max-width: 768px) {
            h1 {
                font-size: 2rem;
            }

            h2 {
                font-size: 1.5rem;
            }

            h3 {
                font-size: 1.2rem;
            }
        }

        @media (max-width: 480px) {
            h1 {
                font-size: 1.8rem;
            }

            h2 {
                font-size: 1.3rem;
            }

            h3 {
                font-size: 1.1rem;
            }
        }

        /* Card Styling */
        .card {
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            padding: 20px;
            margin: 20px 0;
        }

        @media (max-width: 768px) {
            .card {
                padding: 15px;
            }
        }

        @media (max-width: 480px) {
            .card {
                padding: 12px;
            }
        }

        /* Form Elements */
        .form-group {
            margin-bottom: 15px;
        }

        label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
        }

        input {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 16px;
        }

        @media (max-width: 480px) {
            input {
                padding: 8px;
                font-size: 14px;
            }
        }

        /* Buttons */
        button {
            background-color: #0066b3;
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s;
        }

        button:hover {
            background-color: #004e8c;
        }

        button.secondary {
            background-color: #6c757d;
        }

        button.secondary:hover {
            background-color: #5a6268;
        }

        button.danger {
            background-color: #dc3545;
        }

        button.danger:hover {
            background-color: #c82333;
        }

        .buttons {
            display: flex;
            gap: 10px;
            margin-top: 20px;
            flex-wrap: wrap;
        }

        @media (max-width: 480px) {
            button {
                padding: 8px 12px;
                font-size: 14px;
                width: 100%;
            }

            .buttons {
                flex-direction: column;
                gap: 8px;
            }
        }

        /* Tables */
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }

        table,
        th,
        td {
            border: 1px solid #ddd;
        }

        th,
        td {
            padding: 12px;
            text-align: left;
        }

        th {
            background-color: #f4f4f4;
        }

        tr:nth-child(even) {
            background-color: #f9f9f9;
        }

        /* Transaction table specific styles */
        .transaction-wrapper {
            border: 1px solid #ddd;
            border-radius: 8px;
            overflow: hidden;
            margin-top: 20px;
        }

        .transaction-table {
            margin-top: 0;
        }

        .transaction-header {
            background-color: #f4f4f4;
            padding: 12px;
            font-weight: bold;
            border-bottom: 1px solid #ddd;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .transaction-header h3 {
            margin: 0;
        }

        .transaction-footer {
            background-color: #f9f9f9;
            padding: 12px;
            text-align: center;
            border-top: 1px solid #ddd;
        }

        .see-more-btn {
            background-color: #f0f2f5;
            color: #0066b3;
            border: 1px solid #ddd;
            padding: 8px 15px;
            border-radius: 4px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.2s;
        }

        .see-more-btn:hover {
            background-color: #e4e6e9;
        }

        @media (max-width: 768px) {

            th,
            td {
                padding: 8px;
            }
        }

        /* Responsive Table */
        @media (max-width: 640px) {

            /* Convert table to a card-like display */
            table,
            thead,
            tbody,
            th,
            td,
            tr {
                display: block;
            }

            thead tr {
                position: absolute;
                top: -9999px;
                left: -9999px;
            }

            tr {
                margin-bottom: 15px;
                border: 1px solid #ddd;
            }

            td {
                border: none;
                border-bottom: 1px solid #eee;
                position: relative;
                padding-left: 50%;
                text-align: right;
            }

            td:before {
                position: absolute;
                top: 6px;
                left: 6px;
                width: 45%;
                padding-right: 10px;
                white-space: nowrap;
                text-align: left;
                font-weight: bold;
                content: attr(data-label);
            }

            /* Transaction table specific */
            #transactions-body td:nth-of-type(1):before {
                content: "Date & Time";
            }

            #transactions-body td:nth-of-type(2):before {
                content: "Type";
            }

            #transactions-body td:nth-of-type(3):before {
                content: "Amount";
            }

            #transactions-body tr:first-child td {
                text-align: center;
                padding-left: 0;
            }

            #transactions-body tr:first-child td:before {
                content: none;
            }
        }

        /* Navigation Tabs */
        .nav-tabs {
            display: flex;
            border-bottom: 1px solid #ddd;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }

        .nav-tab {
            padding: 10px 15px;
            cursor: pointer;
            border: 1px solid transparent;
            border-bottom: none;
            margin-right: 5px;
            border-radius: 5px 5px 0 0;
            white-space: nowrap;
        }

        .nav-tab.active {
            background-color: white;
            border-color: #ddd;
            color: #0066b3;
            font-weight: bold;
        }

        .nav-tab:hover:not(.active) {
            background-color: #f0f2f5;
        }

        .logout-btn {
            margin-left: auto;
        }

        @media (max-width: 768px) {
            .nav-tabs {
                justify-content: space-between;
            }

            .nav-tab {
                padding: 8px 12px;
                margin-right: 2px;
                font-size: 14px;
            }

            .logout-btn {
                margin-left: 0;
                margin-top: 10px;
                width: 100%;
            }
        }

        @media (max-width: 640px) {
            .nav-tabs {
                flex-direction: column;
                border-bottom: none;
            }

            .nav-tab {
                border: 1px solid #ddd;
                border-radius: 4px;
                margin-bottom: 5px;
                text-align: center;
                padding: 10px;
            }

            .nav-tab.active {
                background-color: #0066b3;
                color: white;
                border-color: #0066b3;
            }
        }

        /* Profile Info */
        .profile-info {
            display: grid;
            grid-template-columns: 150px 1fr;
            gap: 10px;
        }

        .profile-info div {
            padding: 10px;
        }

        .profile-info div:nth-child(odd) {
            font-weight: bold;
        }

        @media (max-width: 640px) {
            .profile-info {
                grid-template-columns: 1fr;
            }

            .profile-info div {
                padding: 8px;
                border-bottom: 1px solid #eee;
            }

            .profile-info div:nth-child(odd) {
                background-color: #f9f9f9;
                margin-bottom: 0;
                border-bottom: none;
                padding-bottom: 0;
            }

            .profile-info div:nth-child(even) {
                margin-bottom: 10px;
                padding-top: 5px;
            }
        }

        /* Alert Messages */
        .alert-popup-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .alert-popup-content {
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
            max-width: 500px;
            width: 90%;
            text-align: center;
            position: relative;
            animation: fadeInUp 0.3s ease-out;
        }

        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .alert-popup-content.success {
            border-top: 5px solid #28a745;
        }

        .alert-popup-content.error {
            border-top: 5px solid #dc3545;
        }

        .alert-popup-content h3 {
            margin-top: 0;
            font-size: 1.2rem;
            margin-bottom: 10px;
        }

        .alert-popup-content p {
            margin-bottom: 20px;
        }

        .alert-popup-btn {
            background-color: #0066b3;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            cursor: pointer;
            font-weight: 500;
        }

        .alert-popup-btn.error {
            background-color: #dc3545;
        }

        .alert-popup-btn.error:hover {
            background-color: #c82333;
        }

        .alert-popup-btn.success {
            background-color: #28a745;
        }

        .alert-popup-btn.success:hover {
            background-color: #218838;
        }

        /* Legacy Messages for backward compatibility */
        .success-message,
        .error-message {
            padding: 10px;
            margin: 10px 0;
            border-radius: 4px;
        }

        .success-message {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .error-message {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        /* Popup */
        .popup-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .popup-content {
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            max-width: 500px;
            width: 90%;
            text-align: center;
        }

        @media (max-width: 480px) {
            .popup-content {
                padding: 15px;
                width: 95%;
            }
        }

        .popup-content h3 {
            margin-top: 0;
            color: #0066b3;
        }

        .popup-content .account-number {
            font-size: 24px;
            font-weight: bold;
            margin: 20px 0;
            padding: 10px;
            background-color: #f0f2f5;
            border-radius: 4px;
            word-break: break-all;
        }

        @media (max-width: 480px) {
            .popup-content .account-number {
                font-size: 18px;
            }
        }

        .close-popup {
            display: block;
            margin: 20px auto 0;
            padding: 10px 20px;
        }
    </style>
</head>

<body>
    <header>
        <div class="container">
            <h1>একটা ব্যাংক</h1>
        </div>
    </header>

    <div class="container">
        <div id="message-area"></div>

        <div class="screens">
            <!-- Main Screen -->
            <div id="main-screen" class="active">
                <div class="card">
                    <h2>Welcome to একটা ব্যাংক</h2>
                    <p>Please choose an option to proceed:</p>
                    <div class="buttons">
                        <button id="create-account-btn">Create New Account</button>
                        <button id="login-btn">Login to Existing Account</button>
                    </div>
                </div>
            </div>

            <!-- Create Account Screen -->
            <div id="create-account-screen">
                <div class="card">
                    <h2>Create New Account</h2>
                    <form id="create-account-form">
                        <div class="form-group">
                            <label for="create-name">Full Name:</label>
                            <input type="text" id="create-name" required>
                        </div>
                        <div class="form-group">
                            <label for="create-address">Address:</label>
                            <input type="text" id="create-address" required>
                        </div>
                        <div class="form-group">
                            <label for="create-phone">Phone Number:</label>
                            <input type="tel" id="create-phone" required>
                        </div>
                        <div class="form-group">
                            <label for="create-password">Password:</label>
                            <input type="password" id="create-password" required>
                        </div>
                        <div class="form-group">
                            <label for="create-confirm-password">Confirm Password:</label>
                            <input type="password" id="create-confirm-password" required>
                        </div>
                        <div class="buttons">
                            <button type="submit">Create Account</button>
                            <button type="button" class="secondary back-btn">Back</button>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Login Screen -->
            <div id="login-screen">
                <div class="card">
                    <h2>Login to Your Account</h2>
                    <form id="login-form">
                        <div class="form-group">
                            <label for="login-account">Account Number:</label>
                            <input type="text" id="login-account" required>
                        </div>
                        <div class="form-group">
                            <label for="login-password">Password:</label>
                            <input type="password" id="login-password" required>
                        </div>
                        <div class="buttons">
                            <button type="submit">Login</button>
                            <button type="button" class="secondary back-btn">Back</button>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Dashboard Screen -->
            <div id="dashboard-screen">
                <div class="card">
                    <div class="nav-tabs">
                        <div class="nav-tab active" data-tab="profile">Profile</div>
                        <a href="#deposit-tab" style="text-decoration: none; color: black;">
                            <div class="nav-tab" data-tab="deposit">Deposit</div>
                        </a>
                        <a href="#withdraw-tab" style="text-decoration: none; color: black;">
                            <div class="nav-tab" data-tab="withdraw">Withdraw</div>
                        </a>
                        <a href="#transactions-tab" style="text-decoration: none; color: black;">
                            <div class="nav-tab" data-tab="transactions">Transactions</div>
                        </a>
                        <a href="#settings-tab" style="text-decoration: none; color: black;">
                            <div class="nav-tab" data-tab="settings">Settings</div>
                        </a>
                        <button id="logout-btn" class="secondary logout-btn">Logout</button>
                    </div>

                    <div id="tab-content">
                        <!-- Profile Tab -->
                        <div id="profile-tab" class="tab-pane active">
                            <h3>Account Information</h3>
                            <div class="profile-info">
                                <div>Account Number:</div>
                                <div id="profile-account-number"></div>
                                <div>Name:</div>
                                <div id="profile-name"></div>
                                <div>Address:</div>
                                <div id="profile-address"></div>
                                <div>Phone Number:</div>
                                <div id="profile-phone"></div>
                                <div>Current Balance:</div>
                                <div id="profile-balance"></div>
                            </div>
                        </div>

                        <!-- Deposit Tab -->
                        <div id="deposit-tab" class="tab-pane">
                            <h3>Deposit Money</h3>
                            <p>Current Balance: $<span id="deposit-current-balance">0.00</span></p>
                            <form id="deposit-form">
                                <div class="form-group">
                                    <label for="deposit-amount">Amount to Deposit ($):</label>
                                    <input type="number" id="deposit-amount" min="1" step="0.01" required>
                                </div>
                                <button type="submit">Deposit</button>
                            </form>
                        </div>

                        <!-- Withdraw Tab -->
                        <div id="withdraw-tab" class="tab-pane">
                            <h3>Withdraw Money</h3>
                            <p>Current Balance: $<span id="withdraw-current-balance">0.00</span></p>
                            <form id="withdraw-form">
                                <div class="form-group">
                                    <label for="withdraw-amount">Amount to Withdraw ($):</label>
                                    <input type="number" id="withdraw-amount" min="1" step="0.01" required>
                                </div>
                                <button type="submit">Withdraw</button>
                            </form>
                        </div>

                        <!-- Transactions Tab -->
                        <div id="transactions-tab" class="tab-pane">
                            <h3>Transaction History</h3>
                            <table id="transactions-table">
                                <thead>
                                    <tr>
                                        <th>Date & Time</th>
                                        <th>Type</th>
                                        <th>Amount</th>
                                    </tr>
                                </thead>
                                <tbody id="transactions-body">
                                    <!-- Transactions will be added here dynamically -->
                                </tbody>
                            </table>
                        </div>

                        <!-- Settings Tab -->
                        <div id="settings-tab" class="tab-pane">
                            <h3>Account Settings</h3>
                            <div class="card">
                                <h4>Delete Account</h4>
                                <p>Warning: This action cannot be undone!</p>
                                <form id="delete-account-form">
                                    <div class="form-group">
                                        <label for="delete-password">Enter your password to confirm:</label>
                                        <input type="password" id="delete-password" required>
                                    </div>
                                    <button type="submit" class="danger">Delete My Account</button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Bank Management System - JavaScript Implementation
        class Transaction {
            constructor(type, amount) {
                this.type = type;
                this.amount = amount;
                this.date = new Date().toLocaleString();
            }
        }

        class Account {
            constructor(accountNumber, password, name, address, phoneNumber) {
                this.accountNumber = accountNumber;
                this.password = password;
                this.name = name;
                this.address = address;
                this.phoneNumber = phoneNumber;
                this.balance = 0.0;
                this.transactionHistory = [];
            }

            validatePassword(password) {
                return this.password === password;
            }

            deposit(amount) {
                if (amount > 0) {
                    this.balance += amount;
                    this.transactionHistory.push(new Transaction("Deposit", amount));
                    return true;
                }
                return false;
            }

            withdraw(amount) {
                if (amount > 0 && amount <= this.balance) {
                    this.balance -= amount;
                    this.transactionHistory.push(new Transaction("Withdrawal", amount));
                    return true;
                }
                return false;
            }
        }

        class Bank {
            constructor() {
                this.accounts = {};
                this.lastAccountNumber = 1000;
                this.loadData();
            }

            createAccount(password, name, address, phoneNumber) {
                this.lastAccountNumber++;
                const accountNumber = "ACC" + this.lastAccountNumber;
                const newAccount = new Account(accountNumber, password, name, address, phoneNumber);
                this.accounts[accountNumber] = newAccount;
                this.saveData();
                return accountNumber;
            }

            getAccount(accountNumber, password) {
                const account = this.accounts[accountNumber];
                if (account && account.validatePassword(password)) {
                    return account;
                }
                return null;
            }

            deleteAccount(accountNumber, password) {
                const account = this.getAccount(accountNumber, password);
                if (account) {
                    delete this.accounts[accountNumber];
                    this.saveData();
                    return true;
                }
                return false;
            }

            saveData() {
                localStorage.setItem('bankData', JSON.stringify({
                    accounts: this.accounts,
                    lastAccountNumber: this.lastAccountNumber
                }));
            }

            loadData() {
                const data = localStorage.getItem('bankData');
                if (data) {
                    const parsedData = JSON.parse(data);
                    this.accounts = parsedData.accounts;
                    this.lastAccountNumber = parsedData.lastAccountNumber;

                    // Restore transaction dates as proper objects
                    for (const accNum in this.accounts) {
                        this.accounts[accNum].__proto__ = Account.prototype;
                        for (const transaction of this.accounts[accNum].transactionHistory) {
                            transaction.__proto__ = Transaction.prototype;
                        }
                    }
                }
            }
        }

        // Application Logic
        const app = {
            bank: new Bank(),
            currentAccount: null,

            init() {
                this.attachEventListeners();
                this.showScreen('main-screen');
            },

            attachEventListeners() {
                // Main screen buttons
                document.getElementById('create-account-btn').addEventListener('click', () => this.showScreen('create-account-screen'));
                document.getElementById('login-btn').addEventListener('click', () => this.showScreen('login-screen'));

                // Back buttons
                document.querySelectorAll('.back-btn').forEach(btn => {
                    btn.addEventListener('click', () => this.showScreen('main-screen'));
                });

                // Forms
                document.getElementById('create-account-form').addEventListener('submit', (e) => this.handleCreateAccount(e));
                document.getElementById('login-form').addEventListener('submit', (e) => this.handleLogin(e));
                document.getElementById('deposit-form').addEventListener('submit', (e) => this.handleDeposit(e));
                document.getElementById('withdraw-form').addEventListener('submit', (e) => this.handleWithdraw(e));
                document.getElementById('delete-account-form').addEventListener('submit', (e) => this.handleDeleteAccount(e));

                // Dashboard tabs - using event delegation for better handling
                const navTabs = document.querySelector('.nav-tabs');
                if (navTabs) {
                    navTabs.addEventListener('click', (e) => {
                        const tab = e.target.closest('.nav-tab');
                        if (tab && tab.dataset.tab) {
                            this.switchTab(tab.dataset.tab);
                        }
                    });
                }

                // Logout button
                document.getElementById('logout-btn').addEventListener('click', () => this.logout());
            },

            showScreen(screenId) {
                document.querySelectorAll('.screens > div').forEach(screen => {
                    screen.classList.remove('active');
                });
                document.getElementById(screenId).classList.add('active');

                // Clear message area when switching screens
                document.getElementById('message-area').innerHTML = '';
            },

            switchTab(tabId) {
                // Remove active class from all tabs
                document.querySelectorAll('.nav-tab').forEach(tab => {
                    tab.classList.remove('active');
                });

                // Add active class to selected tab
                const selectedTab = document.querySelector(`.nav-tab[data-tab="${tabId}"]`);
                if (selectedTab) {
                    selectedTab.classList.add('active');
                }

                // Hide all tab panes
                document.querySelectorAll('.tab-pane').forEach(pane => {
                    pane.classList.remove('active');
                });

                // Show selected tab pane
                const tabPane = document.getElementById(`${tabId}-tab`);
                if (tabPane) {
                    tabPane.classList.add('active');
                }

                // Update balances in deposit/withdraw tabs
                if (tabId === 'deposit' || tabId === 'withdraw') {
                    if (this.currentAccount) {
                        document.getElementById(`${tabId}-current-balance`).textContent =
                            this.currentAccount.balance.toFixed(2);
                    }
                }
            },

            showMessage(message, isError = false) {
                const messageArea = document.getElementById('message-area');
                const messageElement = document.createElement('div');
                messageElement.className = isError ? 'error-message' : 'success-message';
                messageElement.textContent = message;
                messageArea.innerHTML = '';
                messageArea.appendChild(messageElement);

                // Auto-hide message after 5 seconds
                setTimeout(() => {
                    messageElement.remove();
                }, 5000);
            },

            handleCreateAccount(e) {
                e.preventDefault();

                const name = document.getElementById('create-name').value;
                const address = document.getElementById('create-address').value;
                const phone = document.getElementById('create-phone').value;
                const password = document.getElementById('create-password').value;
                const confirmPassword = document.getElementById('create-confirm-password').value;

                if (password !== confirmPassword) {
                    this.showMessage("Passwords do not match!", true);
                    return;
                }

                const accountNumber = this.bank.createAccount(password, name, address, phone);

                // Reset form
                document.getElementById('create-account-form').reset();

                // Show popup with account number
                this.showAccountCreatedPopup(accountNumber);
            },

            showAccountCreatedPopup(accountNumber) {
                // Create popup overlay
                const overlay = document.createElement('div');
                overlay.className = 'popup-overlay';

                // Create popup content
                const content = document.createElement('div');
                content.className = 'popup-content';

                content.innerHTML = `
                    <h3>Account Created Successfully!</h3>
                    <p>Please save your account number. You will need it to login.</p>
                    <div class="account-number">${accountNumber}</div>
                    <p>Keep this number and your password secure.</p>
                    <button class="close-popup">Got it!</button>
                `;

                overlay.appendChild(content);
                document.body.appendChild(overlay);

                // Add event listener to close button
                const closeButton = content.querySelector('.close-popup');
                closeButton.addEventListener('click', () => {
                    document.body.removeChild(overlay);
                    this.showScreen('main-screen');
                });
            },

            handleLogin(e) {
                e.preventDefault();

                const accountNumber = document.getElementById('login-account').value;
                const password = document.getElementById('login-password').value;

                const account = this.bank.getAccount(accountNumber, password);
                if (account) {
                    this.currentAccount = account;
                    this.loadDashboard();
                    this.showScreen('dashboard-screen');
                    document.getElementById('login-form').reset();
                } else {
                    this.showMessage("Invalid account number or password!", true);
                }
            },

            loadDashboard() {
                // Load profile info
                document.getElementById('profile-account-number').textContent = this.currentAccount.accountNumber;
                document.getElementById('profile-name').textContent = this.currentAccount.name;
                document.getElementById('profile-address').textContent = this.currentAccount.address;
                document.getElementById('profile-phone').textContent = this.currentAccount.phoneNumber;
                document.getElementById('profile-balance').textContent = `$${this.currentAccount.balance.toFixed(2)}`;

                // Load transaction history
                const transactionsBody = document.getElementById('transactions-body');
                transactionsBody.innerHTML = '';

                if (this.currentAccount.transactionHistory.length === 0) {
                    const row = document.createElement('tr');
                    const cell = document.createElement('td');
                    cell.colSpan = 3;
                    cell.textContent = 'No transactions found.';
                    cell.style.textAlign = 'center';
                    row.appendChild(cell);
                    transactionsBody.appendChild(row);
                } else {
                    this.currentAccount.transactionHistory.forEach(transaction => {
                        const row = document.createElement('tr');

                        const dateCell = document.createElement('td');
                        dateCell.textContent = transaction.date;
                        row.appendChild(dateCell);

                        const typeCell = document.createElement('td');
                        typeCell.textContent = transaction.type;
                        row.appendChild(typeCell);

                        const amountCell = document.createElement('td');
                        amountCell.textContent = `$${transaction.amount.toFixed(2)}`;
                        row.appendChild(amountCell);

                        transactionsBody.appendChild(row);
                    });
                }

                // Reset the deposit and withdraw forms
                document.getElementById('deposit-form').reset();
                document.getElementById('withdraw-form').reset();

                // Update balances
                document.getElementById('deposit-current-balance').textContent = this.currentAccount.balance.toFixed(2);
                document.getElementById('withdraw-current-balance').textContent = this.currentAccount.balance.toFixed(2);
            },

            handleDeposit(e) {
                e.preventDefault();

                const amountInput = document.getElementById('deposit-amount');
                const amount = parseFloat(amountInput.value);

                if (isNaN(amount) || amount <= 0) {
                    this.showMessage("Please enter a valid amount!", true);
                    return;
                }

                if (this.currentAccount.deposit(amount)) {
                    this.bank.saveData();
                    this.showMessage(`Successfully deposited $${amount.toFixed(2)}`);

                    // Update balance displays
                    document.getElementById('profile-balance').textContent = `$${this.currentAccount.balance.toFixed(2)}`;
                    document.getElementById('deposit-current-balance').textContent = this.currentAccount.balance.toFixed(2);
                    document.getElementById('withdraw-current-balance').textContent = this.currentAccount.balance.toFixed(2);

                    // Reset the form
                    amountInput.value = '';
                }
            },

            handleWithdraw(e) {
                e.preventDefault();

                const amountInput = document.getElementById('withdraw-amount');
                const amount = parseFloat(amountInput.value);

                if (isNaN(amount) || amount <= 0) {
                    this.showMessage("Please enter a valid amount!", true);
                    return;
                }

                if (this.currentAccount.withdraw(amount)) {
                    this.bank.saveData();
                    this.showMessage(`Successfully withdrew $${amount.toFixed(2)}`);

                    // Update balance displays
                    document.getElementById('profile-balance').textContent = `$${this.currentAccount.balance.toFixed(2)}`;
                    document.getElementById('deposit-current-balance').textContent = this.currentAccount.balance.toFixed(2);
                    document.getElementById('withdraw-current-balance').textContent = this.currentAccount.balance.toFixed(2);

                    // Reset the form
                    amountInput.value = '';
                } else {
                    this.showMessage("Insufficient funds for this withdrawal!", true);
                }
            },

            handleDeleteAccount(e) {
                e.preventDefault();

                const password = document.getElementById('delete-password').value;

                if (confirm("Are you sure you want to delete your account? This action cannot be undone!")) {
                    if (this.bank.deleteAccount(this.currentAccount.accountNumber, password)) {
                        this.showMessage("Account deleted successfully.");
                        this.currentAccount = null;

                        // Reset the form
                        document.getElementById('delete-account-form').reset();

                        // Go back to main screen after 2 seconds
                        setTimeout(() => {
                            this.showScreen('main-screen');
                        }, 2000);
                    } else {
                        this.showMessage("Incorrect password. Account deletion failed.", true);
                    }
                }
            },

            logout() {
                this.currentAccount = null;
                this.showScreen('main-screen');
                this.showMessage("Logged out successfully.");
            }
        };

        // Enhanced JavaScript for Responsive Bank Management System

        // Add these functions to your existing JS code

        // Global variable to track if transaction view is in expanded mode
        let transactionsExpanded = false;
        let allTransactions = [];

        // This function adds data-label attributes to table cells for responsive design
        function enhanceTableForResponsiveness() {
            const transactionsTable = document.getElementById('transactions-body');
            if (transactionsTable) {
                const rows = transactionsTable.querySelectorAll('tr');
                rows.forEach(row => {
                    // Skip the "No transactions found" row
                    if (row.cells.length === 1 && row.cells[0].colSpan === 3) {
                        return;
                    }

                    // Add data attributes to each cell
                    const cells = row.querySelectorAll('td');
                    if (cells.length >= 3) {
                        cells[0].setAttribute('data-label', 'Date & Time');
                        cells[1].setAttribute('data-label', 'Type');
                        cells[2].setAttribute('data-label', 'Amount');
                    }
                });
            }
        }

        // Responsive navigation handling
        function handleResponsiveNavigation() {
            // For smaller screens, collapse the tabs after clicking
            const screenWidth = window.innerWidth;
            if (screenWidth <= 640) {
                const navTabs = document.querySelectorAll('.nav-tab');
                navTabs.forEach(tab => {
                    tab.addEventListener('click', () => {
                        // Scroll to the tab content for better UX on mobile
                        const tabId = tab.dataset.tab;
                        const tabContent = document.getElementById(`${tabId}-tab`);
                        if (tabContent) {
                            setTimeout(() => {
                                tabContent.scrollIntoView({ behavior: 'smooth' });
                            }, 100);
                        }
                    });
                });
            }
        }

        // Handle window resize events
        function handleWindowResize() {
            window.addEventListener('resize', () => {
                handleResponsiveNavigation();
            });
        }

        // Modify the loadDashboard function to enhance tables for responsiveness
        const originalLoadDashboard = app.loadDashboard;
        app.loadDashboard = function () {
            originalLoadDashboard.call(this);
            enhanceTableForResponsiveness();
        };

        // Extend the init function to add responsive features
        const originalInit = app.init;
        app.init = function () {
            originalInit.call(this);
            handleResponsiveNavigation();
            handleWindowResize();
        };

        // Add a function to handle orientation change for mobile devices
        window.addEventListener('orientationchange', () => {
            setTimeout(() => {
                enhanceTableForResponsiveness();
            }, 200);
        });

        // Function to adjust form layout based on screen size
        function adjustFormLayout() {
            const forms = document.querySelectorAll('form');
            forms.forEach(form => {
                if (window.innerWidth <= 480) {
                    form.classList.add('mobile-form');
                } else {
                    form.classList.remove('mobile-form');
                }
            });
        }

        // Call adjustFormLayout on page load and resize
        window.addEventListener('load', adjustFormLayout);
        window.addEventListener('resize', adjustFormLayout);

        // Enhanced alert message function with centered pop-up
        function showAlertPopup(message, isError = false) {
            // Create popup overlay
            const overlay = document.createElement('div');
            overlay.className = 'alert-popup-overlay';

            // Create popup content
            const content = document.createElement('div');
            content.className = 'alert-popup-content ' + (isError ? 'error' : 'success');

            const title = document.createElement('h3');
            title.textContent = isError ? 'Error' : 'Success';

            const text = document.createElement('p');
            text.textContent = message;

            const button = document.createElement('button');
            button.className = 'alert-popup-btn ' + (isError ? 'error' : 'success');
            button.textContent = 'OK';

            content.appendChild(title);
            content.appendChild(text);
            content.appendChild(button);

            overlay.appendChild(content);
            document.body.appendChild(overlay);

            // Add event listener to close button
            button.addEventListener('click', () => {
                document.body.removeChild(overlay);
            });

            // Auto-hide after 5 seconds for success messages
            if (!isError) {
                setTimeout(() => {
                    if (document.body.contains(overlay)) {
                        document.body.removeChild(overlay);
                    }
                }, 5000);
            }
        }

        // Updated showMessage function to use popup for alerts
        app.showMessage = function (message, isError = false) {
            // Use popup for alerts
            showAlertPopup(message, isError);

            // Legacy message area for backward compatibility
            const messageArea = document.getElementById('message-area');
            const messageElement = document.createElement('div');
            messageElement.className = isError ? 'error-message' : 'success-message';
            messageElement.textContent = message;
            messageArea.innerHTML = '';
            messageArea.appendChild(messageElement);

            // Auto-hide legacy message after 5 seconds
            setTimeout(() => {
                if (messageArea.contains(messageElement)) {
                    messageElement.remove();
                }
            }, 5000);
        };

        // Function to display transaction history with the latest at the top
        function displayTransactions(transactions, limit = 5) {
            const transactionsBody = document.getElementById('transactions-body');
            const transactionsTab = document.getElementById('transactions-tab');

            // Clear the tab content
            transactionsTab.innerHTML = '';

            // Create transaction wrapper with header
            const wrapper = document.createElement('div');
            wrapper.className = 'transaction-wrapper';

            const header = document.createElement('div');
            header.className = 'transaction-header';

            const headerTitle = document.createElement('h3');
            headerTitle.textContent = 'Transaction History';
            header.appendChild(headerTitle);

            wrapper.appendChild(header);

            // Create table
            const table = document.createElement('table');
            table.className = 'transaction-table';

            const thead = document.createElement('thead');
            const headerRow = document.createElement('tr');

            ['Date & Time', 'Type', 'Amount'].forEach(text => {
                const th = document.createElement('th');
                th.textContent = text;
                headerRow.appendChild(th);
            });

            thead.appendChild(headerRow);
            table.appendChild(thead);

            const tbody = document.createElement('tbody');
            tbody.id = 'transactions-body';

            if (transactions.length === 0) {
                const row = document.createElement('tr');
                const cell = document.createElement('td');
                cell.colSpan = 3;
                cell.textContent = 'No transactions found.';
                cell.style.textAlign = 'center';
                row.appendChild(cell);
                tbody.appendChild(row);
            } else {
                // Sort transactions by date (newest first) before limiting
                const sortedTransactions = [...transactions].sort((a, b) => {
                    return new Date(b.date) - new Date(a.date);
                });

                // Only show limited number of transactions initially
                const displayTransactions = transactionsExpanded ?
                    sortedTransactions :
                    sortedTransactions.slice(0, Math.min(limit, sortedTransactions.length));

                displayTransactions.forEach(transaction => {
                    const row = document.createElement('tr');

                    const dateCell = document.createElement('td');
                    dateCell.textContent = transaction.date;
                    dateCell.setAttribute('data-label', 'Date & Time');
                    row.appendChild(dateCell);

                    const typeCell = document.createElement('td');
                    typeCell.textContent = transaction.type;
                    typeCell.setAttribute('data-label', 'Type');
                    row.appendChild(typeCell);

                    const amountCell = document.createElement('td');
                    amountCell.textContent = `${transaction.amount.toFixed(2)}`;
                    amountCell.setAttribute('data-label', 'Amount');
                    row.appendChild(amountCell);

                    tbody.appendChild(row);
                });
            }

            table.appendChild(tbody);
            wrapper.appendChild(table);

            // Add "See More" button if there are more than the limit
            if (transactions.length > limit && !transactionsExpanded) {
                const footer = document.createElement('div');
                footer.className = 'transaction-footer';

                const seeMoreBtn = document.createElement('button');
                seeMoreBtn.className = 'see-more-btn';
                seeMoreBtn.textContent = 'See All Transactions';
                seeMoreBtn.addEventListener('click', function () {
                    transactionsExpanded = true;
                    displayTransactions(transactions);
                });

                footer.appendChild(seeMoreBtn);
                wrapper.appendChild(footer);
            } else if (transactionsExpanded && transactions.length > limit) {
                const footer = document.createElement('div');
                footer.className = 'transaction-footer';

                const seeLessBtn = document.createElement('button');
                seeLessBtn.className = 'see-more-btn';
                seeLessBtn.textContent = 'Show Less';
                seeLessBtn.addEventListener('click', function () {
                    transactionsExpanded = false;
                    displayTransactions(transactions);
                });

                footer.appendChild(seeLessBtn);
                wrapper.appendChild(footer);
            }

            transactionsTab.appendChild(wrapper);
        }

        // Override the loadDashboard function to include the new transaction display
        app.loadDashboard = function () {
            // Load profile info
            document.getElementById('profile-account-number').textContent = this.currentAccount.accountNumber;
            document.getElementById('profile-name').textContent = this.currentAccount.name;
            document.getElementById('profile-address').textContent = this.currentAccount.address;
            document.getElementById('profile-phone').textContent = this.currentAccount.phoneNumber;
            document.getElementById('profile-balance').textContent = `${this.currentAccount.balance.toFixed(2)}`;

            // Store all transactions for reference
            allTransactions = this.currentAccount.transactionHistory;

            // Display transaction history with the new function
            displayTransactions(allTransactions);

            // Reset the deposit and withdraw forms
            document.getElementById('deposit-form').reset();
            document.getElementById('withdraw-form').reset();

            // Update balances
            document.getElementById('deposit-current-balance').textContent = this.currentAccount.balance.toFixed(2);
            document.getElementById('withdraw-current-balance').textContent = this.currentAccount.balance.toFixed(2);
        };

        // Initialize the application when the DOM is loaded
        document.addEventListener('DOMContentLoaded', () => {
            app.init();
        });
    </script>
</body>

</html>